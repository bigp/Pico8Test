-- Generated by Haxe 3.4.7
local Array = _hx_e()
local Pico8Test = _hx_e()
local com = {}
com.pico8test = {}
com.pico8test.GameUtils = _hx_e()
com.pico8test.Player = _hx_e()

local _hx_bind, _hx_bit, _hx_staticToInstance, _hx_funcToField, _hx_maxn, _hx_print, _hx_apply_self, _hx_box_mr, _hx_bit_clamp, _hx_table, _hx_bit_raw

Array.new = {}

Pico8Test.new = {}
Pico8Test.main = function() 
  local mouseControl = true;
  local this1 = _hx_tab_array({ }, 0);
  local players = this1;
  local value = com.pico8test.Player.new(0,mouseControl);
  .add(.collection(players),value);
  local value1 = com.pico8test.Player.new(1);
  .add(.collection(players),value1);
  ._update = function() 
    .cls();
    com.pico8test.GameUtils.update();
    local player = .all(players);
    while (player:hasNext()) do 
      local player1 = player:next();
      player1:update();
      end;
  end;
  ._draw = function() 
    local player2 = .all(players);
    while (player2:hasNext()) do 
      local player3 = player2:next();
      player3:draw();
      end;
  end;
end

com.pico8test.GameUtils.new = {}
com.pico8test.GameUtils.update = function() 
  local tmp = com.pico8test.GameUtils;
  tmp.frame = tmp.frame + 1;
  com.pico8test.GameUtils.isFrameEven = (_G.math.fmod(com.pico8test.GameUtils.frame, 2)) == 0;
  com.pico8test.GameUtils.updateMouseStatus();
end
com.pico8test.GameUtils.updateMouseStatus = function() 
  .poke(24365,1);
  com.pico8test.GameUtils.mouseX = .stat(32);
  com.pico8test.GameUtils.mouseY = .stat(33);
  com.pico8test.GameUtils.mouseButtonMask = lua.Boot.__cast(.stat(34) , Int);
  com.pico8test.GameUtils.updateMouseButtonIndex(com.pico8test.GameUtils.mouseButtonMask,1,0);
  com.pico8test.GameUtils.updateMouseButtonIndex(com.pico8test.GameUtils.mouseButtonMask,2,1);
  com.pico8test.GameUtils.updateMouseButtonIndex(com.pico8test.GameUtils.mouseButtonMask,4,2);
end
com.pico8test.GameUtils.updateMouseButtonIndex = function(stat,maskId,i) 
  if ((_hx_bit.band(com.pico8test.GameUtils.mouseButtonMask,maskId)) == 0) then 
    if (com.pico8test.GameUtils.mouseTimes[i] >= 0) then 
      com.pico8test.GameUtils.mouseTimes[i] = -com.pico8test.GameUtils.frame;
    end;
    do return end;
  end;
  if (com.pico8test.GameUtils.mouseTimes[i] > 0) then 
    do return end;
  end;
  com.pico8test.GameUtils.mouseTimes[i] = com.pico8test.GameUtils.frame;
end
com.pico8test.GameUtils.mouseDown = function(id) 
  do return com.pico8test.GameUtils.mouseTimes[id] > 0 end;
end
com.pico8test.GameUtils.mousePressed = function(id) 
  do return com.pico8test.GameUtils.mouseTimes[id] == com.pico8test.GameUtils.frame end;
end
com.pico8test.GameUtils.mouseReleased = function(id) 
  do return com.pico8test.GameUtils.mouseTimes[id] == -com.pico8test.GameUtils.frame end;
end

com.pico8test.Player.new = function(id,useMouse) 
  local self = _hx_new(com.pico8test.Player.prototype)
  com.pico8test.Player.super(self,id,useMouse)
  return self
end
com.pico8test.Player.super = function(self,id,useMouse) 
  if (useMouse == nil) then 
    useMouse = false;
  end;
  self.isShooting = false;
  self.healthTemp = 100;
  self.health = 100;
  self.numHeals = 3;
  self.aimCharge = 0;
  self.wasAiming = false;
  self.isAiming = false;
  self.useMouse = false;
  self.spriteIndex = com.pico8test.Player.SPRITE_PLAYER;
  self.aimCounter = 0;
  self.walkCounter = 0;
  self.dirY = 0;
  self.dirX = 0;
  self.speed = 1;
  self.yFinal = 0;
  self.xFinal = 0;
  self.y = 128;
  self.x = 128;
  self.id = 0;
  self.id = id;
  self.useMouse = useMouse;
end
com.pico8test.Player.prototype = _hx_a(
  'update', function(self) 
    if (self.useMouse) then 
      self:updateMouse();
    end;
    self:healOverTime();
    self:checkInputs();
  end,
  'healOverTime', function(self) 
    if (self.health >= self.healthTemp) then 
      do return end;
    end;
    local tmp = self;
    tmp.health = tmp.health + 1;
  end,
  'updateMouse', function(self) 
    if (not com.pico8test.GameUtils.mouseDown(1) and self.isShooting) then 
      self.isShooting = false;
    end;
    if (not self.isShooting) then 
      self.isAiming = com.pico8test.GameUtils.mouseDown(1);
    end;
    if (self.wasAiming ~= self.isAiming) then 
      if (self.isAiming) then 
        .sfx(0);
      else
        .sfx(1);
      end;
    end;
    self.wasAiming = self.isAiming;
    if (com.pico8test.GameUtils.mousePressed(0)) then 
      if (self.isAiming) then 
        self:shoot();
      else
        if (not self.isShooting) then 
          self:healUp();
        end;
      end;
    end;
  end,
  'healUp', function(self) 
    if (self.numHeals == 0) then 
      .sfx(2);
      do return end;
    end;
    if (self.health >= 100) then 
      .sfx(3);
      do return end;
    end;
    local tmp = self;
    tmp.numHeals = tmp.numHeals - 1;
    self.healthTemp = .min(100,self.healthTemp + com.pico8test.Player.HEAL_AMOUNT);
    self.health = .min(self.healthTemp,self.health + (com.pico8test.Player.HEAL_AMOUNT / 2));
    .sfx(4);
  end,
  'shoot', function(self) 
    .sfx(com.pico8test.Player.SFX_SHOOT + (_G.math.fmod(com.pico8test.GameUtils.frame, 3)));
    self.isAiming = false;
    self.isShooting = true;
  end,
  'checkInputs', function(self) 
    self.dirX = 0;
    self.dirY = 0;
    if (self.isAiming) then 
      self.speed = com.pico8test.Player.SPEED_MIN;
    else
      self.speed = com.pico8test.Player.SPEED_MAX;
    end;
    if (.btn(0,self.id)) then 
      local tmp = self;
      tmp.dirX = tmp.dirX - 1;
    end;
    if (.btn(1,self.id)) then 
      local tmp1 = self;
      tmp1.dirX = tmp1.dirX + 1;
    end;
    if (.btn(2,self.id)) then 
      local tmp2 = self;
      tmp2.dirY = tmp2.dirY - 1;
    end;
    if (.btn(3,self.id)) then 
      local tmp3 = self;
      tmp3.dirY = tmp3.dirY + 1;
    end;
    local tmp4 = self;
    tmp4.x = tmp4.x + (self.dirX * self.speed);
    local tmp5 = self;
    tmp5.y = tmp5.y + (self.dirY * self.speed);
    if (self.x < 0) then 
      self.x = 0;
      self.dirX = 0;
    end;
    if (self.x > com.pico8test.Player.MAX_X) then 
      self.x = com.pico8test.Player.MAX_X;
      self.dirX = 0;
    end;
    if (self.y < 0) then 
      self.y = 0;
      self.dirY = 0;
    end;
    if (self.y > com.pico8test.Player.MAX_Y) then 
      self.y = com.pico8test.Player.MAX_Y;
      self.dirY = 0;
    end;
    if ((self.dirX == 0) and (self.dirY == 0)) then 
      self.walkCounter = 0;
    else
      local tmp6 = self;
      tmp6.walkCounter = tmp6.walkCounter + self.speed;
    end;
    if (self.isAiming) then 
      self.aimCharge = .min(com.pico8test.Player.AIM_CHARGE_MAX,self.aimCharge + 1);
      local tmp7 = self;
      tmp7.aimCounter = tmp7.aimCounter + 1;
      local tmp8 = self;
      tmp8.aimCounter = _G.math.fmod(tmp8.aimCounter, ((com.pico8test.Player.AIM_CHARGE_MAX - self.aimCharge) + 2));
    else
      self.aimCharge = 0;
      self.aimCounter = 0;
    end;
    self.xFinal = _hx_bit.arshift(self.x,1);
    self.yFinal = _hx_bit.arshift(self.y,1);
  end,
  'getWalkCounter', function(self) 
    do return _G.math.fmod(self.walkCounter / com.pico8test.Player.SPEED_MAX, 3) end
  end,
  'draw', function(self) 
    if (self.isAiming) then 
      if (self.aimCounter == 0) then 
        .pal(8,9);
      end;
      self:drawSprite((self.spriteIndex + 3) + self:getWalkCounter());
    else
      self:drawSprite(self.spriteIndex + self:getWalkCounter());
    end;
    .pal();
    if (self.useMouse) then 
      local offset = 0;
      if (self.isAiming) then 
        offset = 1 + (_G.math.fmod(com.pico8test.GameUtils.frame / 1.2, 3));
      end;
      .spr(com.pico8test.Player.SPRITE_CURSOR + offset,com.pico8test.GameUtils.mouseX,com.pico8test.GameUtils.mouseY);
    end;
    self:drawHealthBar();
  end,
  'drawHealthBar', function(self) 
    local barColor = 11;
    if (self.health < 10) then 
      barColor = 8;
    end;
    .line(self.xFinal,self.yFinal + 9,self.xFinal + (self.health / 15),self.yFinal + 9,barColor);
  end,
  'drawSprite', function(self,id) 
    .spr(id,self.xFinal,self.yFinal);
  end
)
_hx_bit_clamp = function(v) 
  if v <= 2147483647 and v >= -2147483648 then
    if v > 0 then return _G.math.floor(v)
    else return _G.math.ceil(v)
    end
  end
  if v > 2251798999999999 then v = v*2 end;
  if (v ~= v or math.abs(v) == _G.math.huge) then return nil end
  return _hx_bit.band(v, 2147483647 ) - math.abs(_hx_bit.band(v, 2147483648))
end
pcall(require, 'bit')
if bit then
  _hx_bit = bit
elseif bit32 then
  local _hx_bit_raw = bit32
  _hx_bit = setmetatable({}, { __index = _hx_bit_raw });
  _hx_bit.bnot = function(...) return _hx_bit_clamp(_hx_bit_raw.bnot(...)) end;
  _hx_bit.bxor = function(...) return _hx_bit_clamp(_hx_bit_raw.bxor(...)) end;
end
_hx_array_mt.__index = Array.prototype

local _hx_static_init = function()
  com.pico8test.GameUtils.mouseX = 0
  com.pico8test.GameUtils.mouseY = 0
  com.pico8test.GameUtils.mouseButtonMask = 0
  com.pico8test.GameUtils.mouseTimes = _hx_tab_array({[0]=-1, -1, -1 }, 3)
  com.pico8test.GameUtils.frame = 0
  com.pico8test.GameUtils.isFrameEven = false
  com.pico8test.Player.SFX_SHOOT = 5
  com.pico8test.Player.SPRITE_PLAYER = 1
  com.pico8test.Player.SPRITE_CURSOR = 7
  com.pico8test.Player.AIM_CHARGE_MAX = 10
  com.pico8test.Player.SPEED_MIN = 1
  com.pico8test.Player.SPEED_MAX = 3
  com.pico8test.Player.HEAL_AMOUNT = 20
  com.pico8test.Player.SIZE = 16
  com.pico8test.Player.MAX_X = 256 - com.pico8test.Player.SIZE
  com.pico8test.Player.MAX_Y = 250 - com.pico8test.Player.SIZE
  
end

_hx_static_init();
Pico8Test.main()
return _hx_exports
